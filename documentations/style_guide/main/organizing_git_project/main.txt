Nyvo Studio Project Documentation Style Guide:

    1. All Nyvo Studio project repositories MUST contain a 'docs' directory.

    2. All Nyvo Studio project repositories should have a 'README.md' file 
        - that follows the Markdown formatting and style guidelines.

    3. All Nyvo Studio project repositories MUST contain a 'Privacy Policy' file.

    4. All files referenced in this line : 'Security Policies', 'Code of Conduct', 'Contributing Guidelines', and 'terms of service'
        - MUST be located within the 'docs' directory.

    5. Only the 'License' file is permitted to be located in the main directory of the repository.

    6. All Nyvo Studio-owned repositories MUST be licensed under Creative Commons Zero v1.0 Universal.

    7. No force-commits are allowed in Nyvo Studio repositories.

    8. No commits should be signed off and applied to the main branch without being pulled and branched first.

    9. All commits should have a branch of their own, discussed and then merged to the main branch.

    10. Commit messages should not refer to the updates applied to the project as convention, 
        - but rather to the main file title with the addition of the word 'Main.'

    11. Commit descriptions MUST refer to the updates affixed to the file ( No file description should be referred to ).

    12. All versions of the project repository MUST be controlled under semantic ( "https://semver.org/" )

    13. The version numbering of the project shall be split into to phases: ( Pre-Release phase, Release phase )

    14. During the Pre-Release phase all changes in the development procces ( Including added or remover files and directories ) are a part of the version numbering.

    15. During the Release phase, only the user-side features are a part of the version mumbering.

    16. When a project reaches the Release phase, a ( changelog.md ) file should be implemented.

    17. The Release phase version numbering is only mentioned in ( the changelog.md ) file.

    18. Release versioning and development versioning are seperate concepts, do not attempt to use Release versioning while adding updates to the back-end segment of the projects.

    19. The branch names should only refer to the project version number. Example: 1.0.9.

    46. Always create a new remote branch and pull request before merging, after you have made all the changes required in the pull_request to_do.

    43. Contributors MUST Always create a pull request and branch before even attempting to add any changes to their local repository.

    20. Pull request titles should refer to the feat or MAJOR change commit message which is expected to be the outcome after all the to_do's are finished.

    21. All pull requests MUST have at least one comment before being merged.

    22. Contributors MUST NOT list any of the ( fix ) or ( feat ) in the special comments of a pull request ( i.e: to_do, description ),
        - They shall be self_explanatory in the commit messages.

    23. Pull requests MUST contain a To-Do list in their changelog for new updates to be pushed to the branch.

    29. All pull reqeusts MUST contain a well_formatted ( The formatting in this case is optional ) description comment,
        - which fully explains the purpose of the changes added and their outcome result on the project code_base.

    30. The pull_request description comment MUST always be the first comment.


    24. All Pull requests should contain a ```signed off by``` section in their first comment, Continued by tagging all the contributers who participate in the update.

    45. pull_requests MUST be a group of ( fix ) tags which generate one MAJOR CHANGE or feat.

    28. If a update has been rejected or/and left undone, The branch related to the update MUST NOT be deleted, ONLY the pull_request
         - MUST be closed and labled as ```Rejected``` 
         - ( The changelog comment MUST stay as it is. )

    25. The ```signed off by``` section MUST be at the last section of the comment and refer to the contributors who parted in the update.

    26. All code MUST be reformatted and pass all the tests given by the GitHub Actions linter before being merged
        - (excluding txt or documentation files).

    30. Only compact changes after a merge are allowed to be patched and committed outside of branches by the project manager.

    31. Issues naming conventions should follow the corressondig regular expression: `{Issue Title} | N : {Issue Number}`, e.x: problem(docs): remove harsh rules | N : 1.

    32. Issue titles naming follows the same convetions as commit message.

    32. All issues should contain at least 1 comment.

    33. The first comment of an issue is called the __details__ comment.

    34. The first comment of an issue should be the __details__ comment.

    35. The __details__ comment should elucidate all of the extant issues in the latest branch.

    36. No issue is allowed to be assigned a To-Do list.

    37. Every other asepct in the __details__ comment, should follow the conventions of pull_requests __changelog__ comment.

    44. Push changes as often as possible, all the changes to the project ( including the ones that are rejected or/and aborted ) shall be recorded.

    38. All suspended  ( projects that don't take any new update for a designated period of time ) projects shall be archived and be followed up with
        - a note text at the tail of their README file, elucidating the fact that the project have been archived.

    39. The git commit messages are formatted by the https://www.conventionalcommits.org/en/v1.0.0/ conventions.

    40. All Git commit messages should have their branch name at their footer.

    41. In the context of updating local repositories, use merge instead of rebase.

    42. While performing any type of merging operation, adhere to the same guidelines as commit messages and provide the current task your working on.
        - ( Updating documentations, refactoring source code ):
        - e.x: merge(fetch): update github docs
        - .
